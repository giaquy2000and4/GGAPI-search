import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import threading
import os
import requests
from io import BytesIO
from PIL import Image
import time
from datetime import datetime, timedelta

# --------- C·∫§U H√åNH GOOGLE API ----------
API_KEY = "AIzaSyBYUEQzOl5wF5wObQaN0DDn6E7KDZHYhlc"
CX = "72be8b4014fac4e40"
RATE_LIMIT_DELAY = 0.25  # gi√¢y gi·ªØa hai call API
ALLOWED_FORMATS = ["jpeg", "jpg", "png"]
_last_api_call = datetime.min  # d√πng cho rate‚Äëlimit


# ----------------------------------------

# ---------- H√ÄM TI·ªÜN √çCH ----------
def wait_if_needed():
    global _last_api_call
    elapsed = datetime.now() - _last_api_call
    if elapsed < timedelta(seconds=RATE_LIMIT_DELAY):
        time.sleep((timedelta(seconds=RATE_LIMIT_DELAY) - elapsed).total_seconds())
    _last_api_call = datetime.now()


def search_image_on_google(query, max_results=50):
    url = "https://www.googleapis.com/customsearch/v1"
    all_links, start = [], 1

    while len(all_links) < max_results and start <= 90:
        wait_if_needed()
        params = {
            "q": query,
            "cx": CX,
            "key": API_KEY,
            "searchType": "image",
            "num": 10,
            "start": start,
            "imgSize": "huge"
        }
        r = requests.get(url, params=params)
        if r.status_code != 200:
            break
        items = r.json().get("items", [])
        all_links.extend([item["link"] for item in items])
        if len(items) < 10:
            break
        start += 10

    return all_links[:max_results]


def download_image(url, save_folder, filename_index, log_cb):
    try:
        r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
        ctype = r.headers.get("Content-Type", "").lower()
        if not any(fmt in ctype for fmt in ALLOWED_FORMATS):
            log_cb(f"‚õî ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá ({ctype}), b·ªè qua.")
            return False

        img = Image.open(BytesIO(r.content))
        w, h = img.size
        log_cb(f"üìê {w}x{h}")
        os.makedirs(save_folder, exist_ok=True)
        fname = f"{filename_index:03d}.png"
        img.save(os.path.join(save_folder, fname), "PNG")
        log_cb(f"‚úÖ L∆∞u: {fname}")
        return True
    except Exception as e:
        log_cb(f"‚ùå L·ªói: {e}")
        return False


def download_images(keywords, per_kw, folder, log_cb, progress_cb=None, stats_cb=None):
    idx = 1
    total_keywords = len(keywords)
    total_success = 0
    total_failed = 0

    for kw_idx, kw in enumerate(keywords):
        log_cb(f"\nüîç T·ª´ kh√≥a: {kw}")
        urls = search_image_on_google(kw, 50)
        cnt = 0
        failed_cnt = 0

        for u in urls:
            if download_image(u, folder, idx, log_cb):
                idx += 1
                cnt += 1
                total_success += 1
            else:
                failed_cnt += 1
                total_failed += 1

            # C·∫≠p nh·∫≠t th·ªëng k√™ sau m·ªói ·∫£nh
            if stats_cb:
                stats_cb(total_success + total_failed, total_success, total_failed)

            if cnt >= per_kw:
                break

        log_cb(f"üéØ {cnt}/{per_kw} ·∫£nh cho \"{kw}\" (th·∫•t b·∫°i: {failed_cnt})")

        # C·∫≠p nh·∫≠t progress bar
        if progress_cb:
            progress_cb((kw_idx + 1) / total_keywords * 100)


# ---------- H·∫æT TI·ªÜN √çCH ----------


# ---------- GUI ----------
class ImageDownloaderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üì• Google Image Downloader Pro")
        self.root.geometry("1200x700")
        self.root.configure(bg="#1a1a1a")
        self.root.resizable(True, True)
        self.root.minsize(1000, 600)

        # Thi·∫øt l·∫≠p style
        self.setup_styles()

        # T·∫°o main container v·ªõi scrollbar
        main_canvas = tk.Canvas(root, bg="#1a1a1a", highlightthickness=0)
        main_scrollbar = ttk.Scrollbar(root, orient="vertical", command=main_canvas.yview)
        scrollable_frame = tk.Frame(main_canvas, bg="#1a1a1a")

        scrollable_frame.bind(
            "<Configure>",
            lambda e: main_canvas.configure(scrollregion=main_canvas.bbox("all"))
        )

        main_canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        main_canvas.configure(yscrollcommand=main_scrollbar.set)

        main_canvas.pack(side="left", fill="both", expand=True)
        main_scrollbar.pack(side="right", fill="y")

        # Main content trong scrollable frame
        main_frame = tk.Frame(scrollable_frame, bg="#1a1a1a")
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)

        # Header nh·ªè g·ªçn h∆°n
        self.create_header(main_frame)

        # Content area v·ªõi 2 c·ªôt
        content_frame = tk.Frame(main_frame, bg="#1a1a1a")
        content_frame.pack(fill="both", expand=True, pady=10)

        # C·ªôt tr√°i - Input
        left_frame = tk.Frame(content_frame, bg="#1a1a1a")
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 8))

        # C·ªôt ph·∫£i - Output
        right_frame = tk.Frame(content_frame, bg="#1a1a1a")
        right_frame.pack(side="right", fill="both", expand=True, padx=(8, 0))

        # T·∫°o c√°c sections
        self.create_input_section(left_frame)
        self.create_output_section(right_frame)
        self.create_control_section(main_frame)

        # Bind mouse wheel to canvas
        def _on_mousewheel(event):
            main_canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

        main_canvas.bind_all("<MouseWheel>", _on_mousewheel)

        # Bi·∫øn tr·∫°ng th√°i
        self.is_downloading = False
        self.stats = {"total": 0, "success": 0, "failed": 0}

    def setup_styles(self):
        """Thi·∫øt l·∫≠p style cho c√°c widget"""
        style = ttk.Style()
        style.theme_use("clam")

        # Style cho button
        style.configure("Accent.TButton",
                        background="#4CAF50",
                        foreground="white",
                        borderwidth=0,
                        focuscolor="none",
                        font=("Segoe UI", 10, "bold"))
        style.map("Accent.TButton",
                  background=[("active", "#45a049"), ("pressed", "#3d8b40")])

        # Style cho secondary button
        style.configure("Secondary.TButton",
                        background="#555555",
                        foreground="white",
                        borderwidth=0,
                        focuscolor="none")
        style.map("Secondary.TButton",
                  background=[("active", "#666666"), ("pressed", "#444444")])

        # Style cho progressbar
        style.configure("Custom.Horizontal.TProgressbar",
                        background="#4CAF50",
                        troughcolor="#333333",
                        borderwidth=0,
                        lightcolor="#4CAF50",
                        darkcolor="#4CAF50")

    def create_header(self, parent):
        """T·∫°o header v·ªõi title v√† description"""
        header_frame = tk.Frame(parent, bg="#1a1a1a")
        header_frame.pack(fill="x", pady=(0, 10))

        title_label = tk.Label(header_frame,
                               text="üì• Google Image Downloader Pro",
                               font=("Segoe UI", 18, "bold"),
                               bg="#1a1a1a", fg="#ffffff")
        title_label.pack(anchor="w")

        desc_label = tk.Label(header_frame,
                              text="T·∫£i h√†ng lo·∫°t ·∫£nh t·ª´ Google Images",
                              font=("Segoe UI", 9),
                              bg="#1a1a1a", fg="#cccccc")
        desc_label.pack(anchor="w", pady=(3, 0))

    def create_input_section(self, parent):
        """T·∫°o section nh·∫≠p li·ªáu"""
        # Keywords section
        keywords_frame = self.create_section_frame(parent, "üîç T·ª´ kh√≥a t√¨m ki·∫øm")

        # Text area v·ªõi scrollbar
        text_frame = tk.Frame(keywords_frame, bg="#2a2a2a")
        text_frame.pack(fill="both", expand=True, pady=(10, 0))

        self.key_text = tk.Text(text_frame,
                                height=8,
                                bg="#333333",
                                fg="#ffffff",
                                insertbackground="#ffffff",
                                font=("Consolas", 9),
                                wrap="word",
                                relief="flat",
                                bd=0,
                                padx=10,
                                pady=8)

        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=self.key_text.yview)
        self.key_text.configure(yscrollcommand=scrollbar.set)

        self.key_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Placeholder text
        self.key_text.insert("1.0", "Nh·∫≠p c√°c t·ª´ kh√≥a, m·ªói d√≤ng m·ªôt t·ª´ kh√≥a...\nV√≠ d·ª•:\ncon m√®o\ncon ch√≥\nphong c·∫£nh")
        self.key_text.bind("<FocusIn>", self.clear_placeholder)
        self.key_text.bind("<FocusOut>", self.add_placeholder)

        # Load file button
        load_btn = ttk.Button(keywords_frame,
                              text="üìÅ T·∫£i file .txt",
                              style="Secondary.TButton",
                              command=self.load_txt)
        load_btn.pack(pady=(10, 0))

        # Settings section
        settings_frame = self.create_section_frame(parent, "‚öôÔ∏è C√†i ƒë·∫∑t")

        # S·ªë ·∫£nh m·ªói t·ª´ kh√≥a
        num_frame = tk.Frame(settings_frame, bg="#2a2a2a")
        num_frame.pack(fill="x", pady=(10, 5))

        tk.Label(num_frame,
                 text="S·ªë ·∫£nh m·ªói t·ª´ kh√≥a:",
                 bg="#2a2a2a", fg="#ffffff",
                 font=("Segoe UI", 10)).pack(side="left")

        self.num_var = tk.IntVar(value=5)
        num_spinbox = tk.Spinbox(num_frame,
                                 from_=1, to=20,
                                 textvariable=self.num_var,
                                 width=8,
                                 font=("Segoe UI", 10),
                                 bg="#333333",
                                 fg="#ffffff",
                                 buttonbackground="#555555",
                                 relief="flat",
                                 bd=0)
        num_spinbox.pack(side="right")

        # Th∆∞ m·ª•c l∆∞u
        dir_frame = tk.Frame(settings_frame, bg="#2a2a2a")
        dir_frame.pack(fill="x", pady=(5, 10))

        tk.Label(dir_frame,
                 text="Th∆∞ m·ª•c l∆∞u:",
                 bg="#2a2a2a", fg="#ffffff",
                 font=("Segoe UI", 10)).pack(anchor="w")

        dir_input_frame = tk.Frame(dir_frame, bg="#2a2a2a")
        dir_input_frame.pack(fill="x", pady=(5, 0))

        self.dir_var = tk.StringVar()
        dir_entry = tk.Entry(dir_input_frame,
                             textvariable=self.dir_var,
                             bg="#333333",
                             fg="#ffffff",
                             font=("Segoe UI", 10),
                             relief="flat",
                             bd=0)
        dir_entry.pack(side="left", fill="x", expand=True, ipady=5)

        dir_btn = ttk.Button(dir_input_frame,
                             text="üìÇ Ch·ªçn",
                             style="Secondary.TButton",
                             command=self.pick_dir)
        dir_btn.pack(side="right", padx=(5, 0))

    def create_output_section(self, parent):
        """T·∫°o section output"""
        # Log section
        log_frame = self.create_section_frame(parent, "üìä Ti·∫øn tr√¨nh t·∫£i")

        # Progress bar
        progress_frame = tk.Frame(log_frame, bg="#2a2a2a")
        progress_frame.pack(fill="x", pady=(10, 0))

        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame,
                                            variable=self.progress_var,
                                            maximum=100,
                                            style="Custom.Horizontal.TProgressbar")
        self.progress_bar.pack(fill="x", pady=(0, 5))

        self.progress_label = tk.Label(progress_frame,
                                       text="S·∫µn s√†ng t·∫£i...",
                                       bg="#2a2a2a", fg="#cccccc",
                                       font=("Segoe UI", 9))
        self.progress_label.pack(anchor="w")

        # Log text area
        log_text_frame = tk.Frame(log_frame, bg="#2a2a2a")
        log_text_frame.pack(fill="both", expand=True, pady=(10, 0))

        self.log_box = tk.Text(log_text_frame,
                               height=8,
                               bg="#1e1e1e",
                               fg="#00ff99",
                               insertbackground="#ffffff",
                               font=("Consolas", 8),
                               wrap="word",
                               relief="flat",
                               bd=0,
                               padx=10,
                               pady=8)

        log_scrollbar = ttk.Scrollbar(log_text_frame, orient="vertical", command=self.log_box.yview)
        self.log_box.configure(yscrollcommand=log_scrollbar.set)

        self.log_box.pack(side="left", fill="both", expand=True)
        log_scrollbar.pack(side="right", fill="y")

        # Stats section
        stats_frame = self.create_section_frame(parent, "üìà Th·ªëng k√™")

        self.stats_frame = tk.Frame(stats_frame, bg="#2a2a2a")
        self.stats_frame.pack(fill="x", pady=(10, 0))

        # T·∫°o c√°c label th·ªëng k√™
        self.total_label = tk.Label(self.stats_frame,
                                    text="T·ªïng ·∫£nh: 0",
                                    bg="#2a2a2a", fg="#ffffff",
                                    font=("Segoe UI", 10))
        self.total_label.pack(anchor="w")

        self.success_label = tk.Label(self.stats_frame,
                                      text="Th√†nh c√¥ng: 0",
                                      bg="#2a2a2a", fg="#4CAF50",
                                      font=("Segoe UI", 10))
        self.success_label.pack(anchor="w")

        self.failed_label = tk.Label(self.stats_frame,
                                     text="Th·∫•t b·∫°i: 0",
                                     bg="#2a2a2a", fg="#FF5252",
                                     font=("Segoe UI", 10))
        self.failed_label.pack(anchor="w")

    def create_control_section(self, parent):
        """T·∫°o section ƒëi·ªÅu khi·ªÉn"""
        control_frame = tk.Frame(parent, bg="#1a1a1a")
        control_frame.pack(fill="x", pady=(15, 0))

        # Buttons
        btn_frame = tk.Frame(control_frame, bg="#1a1a1a")
        btn_frame.pack(anchor="center")

        self.start_btn = ttk.Button(btn_frame,
                                    text="üöÄ B·∫Øt ƒë·∫ßu t·∫£i",
                                    style="Accent.TButton",
                                    command=self.thread_start)
        self.start_btn.pack(side="left", padx=(0, 10), ipady=10, ipadx=20)

        self.stop_btn = ttk.Button(btn_frame,
                                   text="‚èπÔ∏è D·ª´ng l·∫°i",
                                   style="Secondary.TButton",
                                   command=self.stop_download,
                                   state="disabled")
        self.stop_btn.pack(side="left", padx=(0, 10), ipady=10, ipadx=20)

        self.clear_btn = ttk.Button(btn_frame,
                                    text="üßπ X√≥a log",
                                    style="Secondary.TButton",
                                    command=self.clear_log)
        self.clear_btn.pack(side="left", ipady=10, ipadx=20)

    def create_section_frame(self, parent, title):
        """T·∫°o frame cho t·ª´ng section"""
        section_frame = tk.Frame(parent, bg="#1a1a1a")
        section_frame.pack(fill="both", expand=True, pady=(0, 15))

        # Title
        title_label = tk.Label(section_frame,
                               text=title,
                               font=("Segoe UI", 12, "bold"),
                               bg="#1a1a1a", fg="#ffffff")
        title_label.pack(anchor="w", pady=(0, 8))

        # Content frame
        content_frame = tk.Frame(section_frame, bg="#2a2a2a", relief="flat", bd=1)
        content_frame.pack(fill="both", expand=True, padx=2, pady=2)

        inner_frame = tk.Frame(content_frame, bg="#2a2a2a")
        inner_frame.pack(fill="both", expand=True, padx=10, pady=10)

        return inner_frame

    def clear_placeholder(self, event):
        """X√≥a placeholder text"""
        if self.key_text.get("1.0",
                             "end-1c") == "Nh·∫≠p c√°c t·ª´ kh√≥a, m·ªói d√≤ng m·ªôt t·ª´ kh√≥a...\nV√≠ d·ª•:\ncon m√®o\ncon ch√≥\nphong c·∫£nh":
            self.key_text.delete("1.0", "end")
            self.key_text.config(fg="#ffffff")

    def add_placeholder(self, event):
        """Th√™m placeholder text n·∫øu r·ªóng"""
        if not self.key_text.get("1.0", "end-1c").strip():
            self.key_text.insert("1.0",
                                 "Nh·∫≠p c√°c t·ª´ kh√≥a, m·ªói d√≤ng m·ªôt t·ª´ kh√≥a...\nV√≠ d·ª•:\ncon m√®o\ncon ch√≥\nphong c·∫£nh")
            self.key_text.config(fg="#888888")

    def ui_log(self, msg):
        """Th√™m log v√†o text box"""
        self.log_box.insert(tk.END, msg + "\n")
        self.log_box.see(tk.END)

    def update_progress(self, value):
        """C·∫≠p nh·∫≠t progress bar"""
        self.progress_var.set(value)
        self.progress_label.config(text=f"Ti·∫øn tr√¨nh: {value:.1f}%")

    def update_stats(self, total, success, failed):
        """C·∫≠p nh·∫≠t th·ªëng k√™"""
        self.stats = {"total": total, "success": success, "failed": failed}
        self.total_label.config(text=f"T·ªïng ·∫£nh: {total}")
        self.success_label.config(text=f"Th√†nh c√¥ng: {success}")
        self.failed_label.config(text=f"Th·∫•t b·∫°i: {failed}")

    def reset_stats(self):
        """Reset th·ªëng k√™"""
        self.stats = {"total": 0, "success": 0, "failed": 0}
        self.update_stats(0, 0, 0)

    def load_txt(self):
        """Load file txt"""
        path = filedialog.askopenfilename(
            title="Ch·ªçn file t·ª´ kh√≥a",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if path:
            try:
                with open(path, encoding="utf-8") as f:
                    content = f.read()
                    self.key_text.delete("1.0", tk.END)
                    self.key_text.insert(tk.END, content)
                    self.key_text.config(fg="#ffffff")
                self.ui_log(f"‚úÖ ƒê√£ t·∫£i file: {os.path.basename(path)}")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {str(e)}")

    def pick_dir(self):
        """Ch·ªçn th∆∞ m·ª•c l∆∞u"""
        path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh")
        if path:
            self.dir_var.set(path)
            self.ui_log(f"üìÇ Ch·ªçn th∆∞ m·ª•c: {path}")

    def clear_log(self):
        """X√≥a log"""
        self.log_box.delete("1.0", tk.END)
        self.progress_var.set(0)
        self.progress_label.config(text="S·∫µn s√†ng t·∫£i...")
        self.reset_stats()

    def stop_download(self):
        """D·ª´ng t·∫£i (placeholder)"""
        self.ui_log("‚èπÔ∏è ƒêang d·ª´ng t·∫£i...")
        # TODO: Implement stop functionality

    def thread_start(self):
        """B·∫Øt ƒë·∫ßu t·∫£i trong thread ri√™ng"""
        keywords_text = self.key_text.get("1.0", tk.END).strip()

        # Ki·ªÉm tra placeholder
        if keywords_text == "Nh·∫≠p c√°c t·ª´ kh√≥a, m·ªói d√≤ng m·ªôt t·ª´ kh√≥a...\nV√≠ d·ª•:\ncon m√®o\ncon ch√≥\nphong c·∫£nh":
            keywords_text = ""

        keywords = [kw.strip() for kw in keywords_text.splitlines() if kw.strip()]
        per_kw = self.num_var.get()
        folder = self.dir_var.get()

        if not keywords or not folder:
            messagebox.showerror("Thi·∫øu th√¥ng tin",
                                 "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a v√† ch·ªçn th∆∞ m·ª•c l∆∞u.")
            return

        # C·∫≠p nh·∫≠t UI
        self.start_btn.config(state="disabled")
        self.stop_btn.config(state="normal")
        self.is_downloading = True
        self.progress_var.set(0)
        self.progress_label.config(text="B·∫Øt ƒë·∫ßu t·∫£i...")
        self.reset_stats()

        # B·∫Øt ƒë·∫ßu thread t·∫£i
        threading.Thread(target=self.run_download,
                         args=(keywords, per_kw, folder),
                         daemon=True).start()

    def run_download(self, keywords, per_kw, folder):
        """Ch·∫°y t·∫£i ·∫£nh"""

        def safe_log(msg):
            self.root.after(0, lambda: self.ui_log(msg))

        def safe_progress(value):
            self.root.after(0, lambda: self.update_progress(value))

        def safe_stats(total, success, failed):
            self.root.after(0, lambda: self.update_stats(total, success, failed))

        try:
            download_images(keywords, per_kw, folder, safe_log, safe_progress, safe_stats)
            self.root.after(0, lambda: self.ui_log("üéâ Ho√†n th√†nh t·∫£i ·∫£nh!"))
        except Exception as e:
            self.root.after(0, lambda: self.ui_log(f"‚ùå L·ªói: {str(e)}"))
        finally:
            # Reset UI
            self.root.after(0, self.download_finished)

    def download_finished(self):
        """K·∫øt th√∫c t·∫£i"""
        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")
        self.is_downloading = False
        self.progress_label.config(text="Ho√†n th√†nh!")


# ---------- MAIN ----------
if __name__ == "__main__":
    root = tk.Tk()
    app = ImageDownloaderApp(root)
    root.mainloop()